name: Build, Push Docker Image, and Deploy to Minikube

on:
  push:
    branches:
      - prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for cross-platform image building)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: docker build -t lexmarkkubernetes/uiservice-prod:${{ github.sha }} .

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push lexmarkkubernetes/uiservice-prod:${{ github.sha }}

      # # Step 6: Tag the image with a version
      # - name: Tag Image with version
      #   run: |
      #     VERSION=v1.0.$(echo ${{ github.run_number }})
      #     docker tag lexmarkkubernetes/uiservice:${{ github.sha }} lexmarkkubernetes/uiservice:$VERSION
      #     docker push lexmarkkubernetes/uiservice:$VERSION

      # Tag Image with latest
      - name: Tag Image with latest
        run: |
          docker tag lexmarkkubernetes/uiservice-prod:${{ github.sha }} lexmarkkubernetes/uiservice-prod:latest
          docker push lexmarkkubernetes/uiservice-prod:latest

      # # Tag Image with dev
      # - name: Tag Image with dev
      #   run: |
      #     docker tag lexmarkkubernetes/uiservice:${{ github.sha }} lexmarkkubernetes/uiservice:dev
      #     docker push lexmarkkubernetes/uiservice:dev

      # Step 7: Update Kubernetes manifest with the new Docker image tag
      - name: Update Kubernetes Manifest
        run: |
          sed -i "s|image: lexmarkkubernetes/uiservice-prod:.*|image: lexmarkkubernetes/uiservice-prod:${{ github.sha }}|g" manifests/prod/deployment.yaml

      # Step 8: Commit and push the updated manifest
      - name: Commit and push changes if any
        env:
          GIT_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "Kamal Ghimire"
          git config --global user.email "kamalghimire121@gmail.com"
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/lexmarkCS499/UI_Microservice.git
          
          if ! git diff --quiet; then
            git fetch origin
            git checkout prod
            git commit -am "Update Docker image to lexmarkkubernetes/uiservice-prod:latest"
            git push origin prod
          else
            echo "No changes to commit"
          fi

  update-parent-repo:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout submodule repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure Git
        run: |
          git config --global user.name "Hunter-Abshire"
          git config --global user.email "hunter.abshire17@yahoo.com"
          git config --global --list  # List git config to verify

      - name: Verify Token Access (Debug Step)
        env:
          GH_TOKEN: ${{ secrets.HUNTER_PAT }}
        run: |
          echo "Testing access to Lexmark repository with provided GH_TOKEN"
          echo "The token is: ${{ secrets.HUNTER_PAT }}"
          curl -I -H "Authorization: token ${{ secrets.HUNTER_PAT }}" https://api.github.com/repos/lexmarkCS499/Lexmark
          curl -I -H "Authorization: token ${{ secrets.HUNTER_PAT }}" https://api.github.com/
          # The response header should return a 200 if authorized, 403 if unauthorized

      - name: Clone Parent Repository
        env:
          GH_TOKEN: ${{ secrets.HUNTER_PAT }}
        run: |
          echo "Cloning Lexmark repository..."
          git clone -b prod https://x-access-token:${{ secrets.HUNTER_PAT }}@github.com/lexmarkCS499/Lexmark.git
          cd Lexmark
          git config -f .gitmodules submodule.UI_Microservice.branch prod
          git submodule update --init --remote --merge UI_Microservice
          git add UI_Microservice
          if [[ $(git status --porcelain) ]]; then
            git commit -m "Committing changes"
          else
            echo "No changes to commit, skipping commit."
          fi

          git push https://x-access-token:${{ secrets.HUNTER_PAT }}@github.com/lexmarkCS499/Lexmark.git prod

  
  # deploy:
  #   needs: update-parent-repo
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Download and Install ArgoCD CLI in Working Directory
  #       run: |
  #         curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  #         chmod +x ./argocd

      # - name: Sync ArgoCD Application
      #   env:
      #     ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
      #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      #   run: |
      #     if [ "${{ github.ref_name }}" == "dev" ]; then
      #       ./argocd app sync dev-app --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
      #     elif [ "${{ github.ref_name }}" == "staging" ]; then
      #       ./argocd app sync staging-app --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
      #     elif [ "${{ github.ref_name }}" == "prod" ]; then
      #       ./argocd app sync prod-app --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
      #     fi
