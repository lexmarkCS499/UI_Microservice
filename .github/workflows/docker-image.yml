name: Build, Push Docker Image, and Deploy to Minikube

on:
  push:
    branches:
      - main  # Run the workflow when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for cross-platform image building)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: docker build -t lexmarkkubernetes/uiservice:${{ github.sha }} .

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push lexmarkkubernetes/uiservice:${{ github.sha }}

      # Step 6: Tag the image with a version
      - name: Tag Image with version
        run: |
          VERSION=v1.0.$(echo ${{ github.run_number }})
          docker tag lexmarkkubernetes/uiservice:${{ github.sha }} lexmarkkubernetes/uiservice:$VERSION
          docker push lexmarkkubernetes/uiservice:$VERSION

      # Optional: Tag Image with dev and push (if you still want this)
      - name: Tag Image with latest
        run: |
          docker tag lexmarkkubernetes/uiservice:${{ github.sha }} lexmarkkubernetes/uiservice:lat
          docker push lexmarkkubernetes/uiservice:lat

      - name: Tag Image with dev
        run: |
          docker tag lexmarkkubernetes/uiservice:${{ github.sha }} lexmarkkubernetes/uiservice:dev
          docker push lexmarkkubernetes/uiservice:dev

      # Step 5: Update Kubernetes manifest with the new Docker image tag
      - name: Update Kubernetes Manifest
        run: |
          sed -i "s|image: lexmarkkubernetes/uiservice:.*|image: lexmarkkubernetes/uiservice:${{ github.sha }}|g" manifests/overlays/dev.yaml

      # Step 6: Commit and push the updated manifest
      - name: Commit and push changes if any
        env:
          GIT_AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "Kamal Ghimire"  # Your GitHub username
          git config --global user.email "kamalghimire121@gmail.com"  # Your GitHub email
          # Use the PAT token directly for authentication
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/lexmarkCS499/lexmarkResource.git
          
          if ! git diff --quiet; then
            git commit -am "Update Docker image to my-repo/my-app:dev"
            git push origin dev
          else
            echo "No changes to commit"
          fi
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download and Install ArgoCD CLI in Working Directory
        run: |
          curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x ./argocd
      - name: Sync ArgoCD Application
          env:
          ARGOCD_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhZG1pbjphcGlLZXkiLCJuYmYiOjE3MzA0Mjg4ODgsImlhdCI6MTczMDQyODg4OCwianRpIjoiNGI1MDFiYzMtNWYyNi00Mzk4LWE4NmItNThhZGFhMTk3NDlmIn0.loQvAsiXo2DjfEncl169-llCBNQfne5Sf1kHWc2yZFI
          ARGOCD_SERVER: 0850-2603-6010-3000-2a06-00-2.ngrok-free.app:443  # Use your server URL stored in secrets
          run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            ./argocd app sync dev-uiservice --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            ./argocd app sync staging-uiservice --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
          elif [ "${{ github.ref_name }}" == "prod" ]; then
            ./argocd app sync prod-uiservice --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web --prune
          fi